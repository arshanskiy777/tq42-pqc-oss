#include <filesystem>
#include <fstream>
#include <iostream>
#include <vector>

#include <pqc/falcon.h>

// Macros simplify the creation of byte vectors for Falcon private and public keys
#define FALCON_PRIVATE(x) std::vector<uint8_t> x(sizeof(pqc_falcon_private_key))
#define FALCON_PUBLIC(x) std::vector<uint8_t> x(sizeof(pqc_falcon_public_key))

int main()
{

    // Initialize byte vectors to hold Falcon's private and public keys for Alice
    FALCON_PRIVATE(priv_alice);
    FALCON_PUBLIC(pub_alice);

    // Generate a Falcon key pair for Alice
    size_t generateResult = PQC_generate_key_pair(
        PQC_CIPHER_FALCON, pub_alice.data(), pub_alice.size(), priv_alice.data(), priv_alice.size()
    );

    if (generateResult != PQC_OK)
    {
        std::cout << "\nKey generation failed!\n" << std::endl;
    }

    // Check if key generation was successful
    CIPHER_HANDLE falconContextAlice = PQC_init_context(PQC_CIPHER_FALCON, priv_alice.data(), priv_alice.size());
    if (falconContextAlice == PQC_BAD_CIPHER)
    {
        std::cout << "\nFailed to initialize cryptographic context!\n" << std::endl;
    }

    // Define a message that will be signed using Falcon's signature algorithm
    char message[] = "Here is my message I will sign by Falcon signature algorithm!";

    // Allocate a structure to hold the signature generated by Falcon
    pqc_falcon_signature signature;

    // Sign the message with Falcon's algorithm using Alice's context
    size_t signResult =
        PQC_sign(falconContextAlice, (uint8_t *)message, sizeof(message), (uint8_t *)&signature, sizeof(signature));

    // Check if the signing process was successful
    if (signResult != PQC_OK)
    {
        std::cout << "\nSSigning process failed!\n" << std::endl;
    }

    // Attempt to verify the signature of the signed message using Alice's public key
    size_t verifyResult = PQC_verify(
        PQC_CIPHER_FALCON, pub_alice.data(), pub_alice.size(), (uint8_t *)message, sizeof(message),
        (uint8_t *)&signature, sizeof(signature)
    );

    // Check the result of the signature verification
    if (verifyResult == PQC_OK)
    {
        std::cout << "\nSignature is valid!\n" << std::endl;
    }
    else
    {
        std::cout << "\nSignature verification failed!\n" << std::endl;
    }

    return 0;
}
